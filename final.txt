import cv2
import time
import os
from adafruit_servokit import ServoKit
kit = ServoKit(channels=16)
kit.servo[0].set_pulse_width_range(500, 2500)
kit.servo[1].set_pulse_width_range(500, 2500)
# create a directory to save detected objects
if not os.path.exists('detected_objects'):
    os.makedirs('detected_objects')

def detect_object():
    # initialize camera
    cap = cv2.VideoCapture(0)
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
    cap.set(cv2.CAP_PROP_FPS, 10)
    fps = int(cap.get(5))

    # add a delay to allow time to place objects
    print("Waiting for 10 seconds. Please place the object in front of the camera...")
    time.sleep(10)

    while True:
        # read a frame from the camera
        ret, frame = cap.read()

        # check if frame was successfully read from the camera
        if not ret:
            print("Error: Failed to read frame from camera")
            break

        # convert the frame to grayscale
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

        # perform object detection on the grayscale image
        # Replace this with your own object detection code
        # In this example, we are just thresholding the image to find white objects
        _, thresh = cv2.threshold(gray, 150, 255, cv2.THRESH_BINARY)
        contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

        # loop over the contours and save the frames where objects are detected
        for contour in contours:
            area = cv2.contourArea(contour)
            if area > 500: # adjust this threshold based on your objects and camera setup
                # save the frame as an image in the detected_objects directory
                timestamp = int(time.time())
                filename = f"detected_objects/object_{timestamp}.jpg"
                cv2.imwrite(filename, frame)
                copy_img=frame.copy()
                image=frame.copy()
                gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

                # apply Gaussian blur to the grayscale image to reduce noise
                blurred = cv2.GaussianBlur(gray, (3, 3), 0)

                # apply Canny edge detection to the blurred image to detect edges
                edged = cv2.Canny(blurred, 10, 100)

                # define a (3, 3) structuring element
                kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))

                # apply dilation to the edged image using the structuring element
                dilate = cv2.dilate(edged, kernel, iterations=1)

                # find contours in the dilated image
                contours, _ = cv2.findContours(dilate, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

                # find the largest contour
                largest_contour = max(contours, key=cv2.contourArea)

                # get the bounding rectangle of the largest contour
                x, y, w, h = cv2.boundingRect(largest_contour)

                # draw the bounding rectangle on a copy of the original image
                image_copy = image.copy()
                cv2.rectangle(image_copy, (x, y), (x + w, y + h), (0, 255, 0), 2)

                # calculate the length, breadth, and aspect ratio of the bounding rectangle
                l = max(w, h)
                b = min(w, h)
                ar = l/b
                perimeter = cv2.arcLength(largest_contour, True)
                # print the length, breadth, and aspect ratio of the bounding rectangle
                print("Length:", l)
                print("Breadth:", b)
                print("Aspect ratio:", ar)
                print("perimeter:", perimeter)

                if l>180 and l<480 and b>35 and b<136 and ar>2.1 and ar<6:
                    print("syringe")
                    kit.servo[15].angle = 80
                elif l>80 and l<200 and b>46 and b<110 and ar>1 and ar<2.1:
                    print('bottle....')
                    kit.servo[15].angle = 135
                elif l>90 and l<177 and b>75 and b<135 and ar>0.7 and ar<2.5: 
                    print('cotton')
                    kit.servo[15].angle = 10
                else:
                    print('other object')
               
                # Wait for the first servo motor to finish moving
                time.sleep(1)

                # Rotate the second servo motor to a specified angle and then back to the original position
                print("tilt tray ")
                kit.servo[0].angle = 0
                time.sleep(5)
                kit.servo[0].angle = 130
                print("tray back to original positon")
                # release the camera resources
                cap.release()
                break
                # release the camera resources
                cap.release()
                return

        # display the frame
        cv2.imshow('frame', frame)

        # wait for a key press to exit
        if cv2.waitKey(1) == ord('q'):
            break

    # close all windows
    cv2.destroyAllWindows()

# call the function periodically
while True:
    detect_object()
    # add a delay between detections
    print("Waiting for 10 seconds before detecting the next object...")
    time.sleep(10)

